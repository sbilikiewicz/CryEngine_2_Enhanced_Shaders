////////////////////////////////////////////////////////////////////////////
//
//  Crytek Engine Shader Source File
//  Copyright (C), Crytek Studios, 2001-2007
// -------------------------------------------------------------------------
//  File name:   CloakLayer.cfx
//  Version:     v1.00
// -------------------------------------------------------------------------
//  History:
//
//  02/2019  -  New Nanolike nanosuit cloak
//              by Sbilikiewicz https://github.com/sbilikiewicz
//
////////////////////////////////////////////////////////////////////////////

#define INST_STREAM_CUSTOM                        \
#if %_RT_INSTANCING_ATTR                          \
  float4 InstAmbientOp  : TEXCOORDN;              \
  float4 InstCloakParams : TEXCOORDN;             \
#endif                                            \  

#include "Common.cfi"
#include "ShadeLib.cfi"
#include "ModificatorVT.cfi"
#include "ModificatorTC.cfi"


// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "Public;"
           "NoPreview;"
           "ShaderDrawType = General;"
           "ShaderType = FX;"
>;

// Tweakables /////////////////

float RefrBumpScale
<
  vsregister = VS_REG_PM_5.x;
  string UIName = "Refraction Bump Scale";    
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 4.0;
  float UIStep = 0.1;
> = 1;

float SparksTilling
<
  vsregister = VS_REG_PM_5.y;
  string UIName = "Sparks tilling";    
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 4.0;
  float UIStep = 0.1;
> = 1.0;

float4 SparksColor
<  
  psregister = PS_REG_PM_4;
  string UIName = "Sparks color";    
  string UIWidget = "color";
> = {0.3, 0.3, 1.0, 1};

float DetailBumpTillingU
<
  psregister = PS_REG_PM_6.x;
  string UIHelp = "Set detail diffuse_bump tilling";                     
  string UIName = "Detail tilling U";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 128.0;
  float UIStep = 0.1;
> = 1.0;

float DetailBumpTillingV
<
  psregister = PS_REG_PM_6.y;
  string UIHelp = "Set detail diffuse_bump tilling";                     
  string UIName = "Detail tilling V";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 128.0;
  float UIStep = 0.1;
> = 1.0;

float DetailBumpScale
<
  psregister = PS_REG_PM_6.z;
  string UIHelp = "Set detail bump scale";                     
  string UIName = "Detail bump scale";        
  string UIWidget = "slider";
  float UIMin = 0.125;
  float UIMax = 10.0;
  float UIStep = 0.1;
> = 0.0;

/// Un-Tweakables //////////////////////

float4 ScrSize : PB_ScreenSize;
float4 CloakParams : PI_CloakParams; //x and y unuzed, z = light amount, w = cloak blend amount
float AnimGenParams = { PB_time 0.4 };

float4 RandomVals :PB_RandomParams;
float4x4 mComposite  : PI_Composite; // View*Projection

float3x4 MotionBlurData : PI_CloakMotionData;
float4x4 mProjection : PB_ProjMatrix;

// Samplers /////////////////

sampler2D envMapSamplerRefr 
{
  Texture = $SceneTarget;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = NONE;
  AddressU = Clamp;
  AddressV = Clamp;   
};

sampler2D depthMapSampler = sampler_state
{
  Texture = $ZTarget;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = POINT; 
  AddressU = Clamp;
  AddressV = Clamp; 
};

sampler2D cloakPaletteMapSampler = sampler_state
{
  Texture = textures/defaults/palette/cloak_palette.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = LINEAR; 
  AddressU = Clamp;
  AddressV = Clamp; 
};

sampler2D cloakInterlationMapSampler = sampler_state
{
  Texture = textures/defaults/palette/cloak_interlation.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = LINEAR; 
  AddressU = Wrap;
  AddressV = Clamp; 
};

sampler2D cloakTransitionMapSampler = sampler_state
{
  Texture = textures/defaults/palette/cloak_transition.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = LINEAR; 
  AddressU = Clamp;
  AddressV = Clamp; 
};

sampler2D cloakSparksMapSampler = sampler_state
{
  Texture = textures/defaults/palette/cloak_sparks.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = LINEAR; 
  AddressU = Wrap;
  AddressV = Clamp; 
};

sampler2D nanoPatternBumpMapSampler = sampler_state
{
  Texture = Shaders/Textures/hex_ddn.dds;//Sbilikiewicz
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = NONE; 
  AddressU = Wrap;
  AddressV = Wrap;  
};

sampler3D volumeNoiseSampler = sampler_state
{  
  Texture = textures/defaults/Noise3D.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = LINEAR; 
  AddressU = Wrap;
  AddressV = Wrap;
  AddressW = Wrap;
};

sampler2D perlinNoiseSampler
{
  Texture = textures/defaults/perlinNoise_sum.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = POINT;
  AddressU = Wrap;
  AddressV = Wrap;  
};

///////////////// vertex input/output //////////////////

struct vtxOUT
{
  OUT_P    
  float4 baseTC    : TEXCOORDN;    
  float4 viewVec   : TEXCOORDN;    
  float4 screenPos : TEXCOORDN;
  float4 vTangent  : TEXCOORDN;    
  float4 vBinormal : TEXCOORDN;    
  float4 vNormal   : TEXCOORDN; 
  float4 vPosWS    : TEXCOORDN;    
  float4 vRefrScreenPos : TEXCOORDN;    
};

struct vtxOUTSparks
{
  OUT_P  
  float4 baseTC     : TEXCOORDN;    
  float4 screenPos  : TEXCOORDN;
  float4 vPosOS     : TEXCOORDN;    //w: distance to world origin
  float3 vConstants : TEXCOORDN;
};

///////////////// vertex shader //////////////////

void Matrix_Inst_General_Prev(inout streamPos IN)
{   
  // Instancing support
 #if %_RT_INSTANCING_ATTR
  IN.InstMatrix[0] = IN.InstMotionBlurData[0];
  IN.InstMatrix[1] = IN.InstMotionBlurData[1];
  IN.InstMatrix[2] = IN.InstMotionBlurData[2];
  IN.InstMatrix[3] = float4(0, 0, 0, 1);
 #else
  IN.InstMatrix[0] = MotionBlurData[0];
  IN.InstMatrix[1] = MotionBlurData[1];
  IN.InstMatrix[2] = MotionBlurData[2];
  IN.InstMatrix[3] = float4(0, 0, 0, 1);
#endif

  // Compose matrixes
  IN.InstMatrix = mul(mProjection, IN.InstMatrix);
}

// Output previous view space position (If skinning used, position is skinned). Used for motion blur
float4 Pos_Prev_VS_General(float4x4 VPMatrix, inout streamPos IN)
{
  float4 HPosition;

/*#if %_RT_SKELETON_SSD
  #if MESH_SHORT_POS
    IN.Position.xyz *= MeshScale.xyz;
  #endif
#endif*/
  
  // Get instanced matrix
  Matrix_Inst_General_Prev(IN);
  
  float4x4 MatrixIdentity;
  MatrixIdentity[0] = float4(1,0,0,0);
  MatrixIdentity[1] = float4(0,1,0,0);
  MatrixIdentity[2] = float4(0,0,1,0);
  MatrixIdentity[3] = float4(0,0,0,1);

  HPosition = _pos_Modificators(IN.InstMatrix, MatrixIdentity, IN, true, false);

  return HPosition;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

vtxOUT CloakVS(app2vertGeneral IN)
{
  vtxOUT OUT = (vtxOUT)0; 

  // Position in screen space.
  streamPos vertPassPos = (streamPos)0;
  streamPos_FromGeneral(IN, vertPassPos);

  _TCModify(vertPassPos.baseTC, OUT.baseTC, vertPassPos.Position, vertPassPos.ObjToTangentSpace[2], TS_DIFFUSE);
  float4 vCloakParams = 0;
  #if %_RT_INSTANCING_ATTR
    vCloakParams = IN.InstCloakParams;
  #else
    vCloakParams = CloakParams;
  #endif

  OUT.baseTC.zw = vCloakParams.wz;

  // Output position
  OUT.HPosition = Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPos);

  // Output tangent to world space matrix
  float3 worldTangentS = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[0]) );
  float3 worldTangentT = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[1]) );
  float3 worldTangentN = normalize(cross(worldTangentS, worldTangentT)) * IN.Tangent.w;

  OUT.vTangent.xyz = worldTangentS; 
  OUT.vBinormal.xyz = worldTangentT;
  OUT.vNormal.xyz = worldTangentN;

	// Output the screen-space texture coordinates
  OUT.screenPos = HPosToScreenTC(OUT.HPosition);

  // Store light amount
  OUT.screenPos.z = OUT.baseTC.w * 1; // only use 20%

  // output world position and view vector
  OUT.viewVec.xyz = vertPassPos.WorldPos.xyz;
  OUT.vPosWS.xyz = vertPassPos.WorldPos.xyz+g_VS_WorldViewPos.xyz;

  // output distance to world origin for frac/noise variation stuff
  OUT.vPosWS.w = length(  OUT.vPosWS.xyz   );

  // Output some constants
  OUT.baseTC.w = (0.25 + 0.25 * (1-OUT.baseTC.z)*50 ) * RefrBumpScale;
  OUT.baseTC.z = saturate( OUT.baseTC.z ) * 0.6;

  /////////////////////////////////////////////////////////////////////
  OUT.vRefrScreenPos = 0;
  
  int nQuality = GetShaderQuality(); 
  //if( nQuality == QUALITY_LOW )
  {
    float3 eyeVec = normalize(-OUT.viewVec.xyz);

    // Put in world space
    float3 vNormal = worldTangentN;                                   // 6 alu
    float NdotE = saturate(dot(eyeVec.xyz, vNormal.xyz)); 

    // "aproximate" refraction vector (using 1 for IOR)
    float3 vRefr =  - 2.0 * NdotE * vNormal + eyeVec;

    // Project refraction into screen space
    float4 vRefrPos = mul(mComposite, float4(vertPassPos.WorldPos.xyz+g_VS_WorldViewPos.xyz+ vRefr*0.05*OUT.baseTC.w, 1));                           // 4 alu
    
    OUT.vRefrScreenPos = vRefrPos;  
  }
  
OUT.viewVec.w = vCloakParams.y;

  return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

pixout CloakRefrationPS(vtxOUT IN)
{
  pixout OUT = (pixout)0;
  int nQuality = GetShaderQuality(); 

  half fLightAmount = IN.screenPos.z;
  half2 vRefrCloakAmount = IN.baseTC.wz;

  half2 refrTC = (IN.screenPos.xy/IN.screenPos.w) ;
  float3x3 mTangentToWS = float3x3(IN.vTangent.xyz, IN.vBinormal.xyz, IN.vNormal.xyz);  

  half3 normalVec= GetNormalMap(bumpMapSampler, IN.baseTC.xy);
  normalVec.xy += GetNormalMap(detailMapSampler, IN.baseTC.xy * float2(DetailBumpTillingU, DetailBumpTillingV)) * DetailBumpScale;

  half fMaskVariation = saturate(tex2D(perlinNoiseSampler, IN.baseTC*0.5 + AnimGenParams*0.25).x*2-1);

  half2 vNanoPattern = -GetNormalMap(nanoPatternBumpMapSampler, IN.baseTC * 36) * vRefrCloakAmount.y * 2;

  normalVec.xyz = normalize(normalVec.xyz);

  half3 eyeVec = normalize(-IN.viewVec.xyz);

  // Put in world space
  half3 vNormal = normalize(mul(normalVec, mTangentToWS).xyz);                                   // 6 alu
  half NdotESat = dot(eyeVec.xyz, vNormal.xyz);
  half NdotEAbs = abs(NdotESat); 
  NdotESat = saturate(NdotESat);
  half fFresnel = 1-NdotESat;
  fFresnel *= fFresnel;
  fFresnel *= fFresnel;
  fFresnel = fFresnel;

  half3 eyeVecTS = ( mul(mTangentToWS, (IN.viewVec.xyz))  );
  //eyeVecTS.xy += normalVec.xy*0.5;
  eyeVecTS = normalize(eyeVecTS);

  half fNanoMask = saturate( 1 - 100*dot(vNanoPattern.xy, vNanoPattern.xy));

  // cloakInterlationMapSampler= abs(frac((refrTC.y+RandomVals.x)*PS_ScreenSize.y*0.25)*2-1)*0.1+0.9;
  half2 vInterlation  =abs(frac((refrTC.y+RandomVals.x)*PS_ScreenSize.y*0.25)*2-1)*0.1+0.9;//tex2D(cloakInterlationMapSampler, (refrTC.y+RandomVals.x)*PS_ScreenSize.y*0.25 ).xy;
  vInterlation -= vNanoPattern*(1-fNanoMask);

  float2 vRefrVS = 0.0f;
  // "aproximate" refraction vector (using 1 for IOR)
  half3 vRefr =  - 2.0 * NdotESat * vNormal + eyeVec;

  // Project refraction into screen space
  float4 vRefrPos = mul(mComposite, float4(IN.vPosWS.xyz + 0.4*vRefr*0.05 * vRefrCloakAmount.x * vInterlation.x , 1));                           // 4 alu
  vRefrVS = 0.5 + ScrSize.zw + (vRefrPos.xy * float2( 0.5 , -0.5 ) / vRefrPos.w);

  half3 refrColor = tex2D(envMapSamplerRefr, ((vRefrVS.xy)-0.5)*(1-0.04) +0.5) .x;
  refrColor.y = tex2D(envMapSamplerRefr, ((vRefrVS.xy)-0.5)*(1 - 0.03) +0.5) .y;
  refrColor.z = tex2D(envMapSamplerRefr, ((vRefrVS.xy)-0.5)*(1 - 0.015) +0.5).z;

  // Fetch color lookup map
  half fCloakColorLookup = vInterlation.y * saturate(1- NdotEAbs);
  
  half fPaletteChannel = IN.viewVec.w;
  half3 cCloakHex = tex2D(cloakPaletteMapSampler, half2(fCloakColorLookup,fPaletteChannel )).xyz;
  cCloakHex = fCloakColorLookup * half3(0.2, 0.4, 1)*(dot(refrColor.xyz, 200)+fLightAmount)*0.02;
  half3 cCloak = 0;
  cCloak = tex2D(cloakPaletteMapSampler, half2(fCloakColorLookup,fPaletteChannel )).xyz*(dot(refrColor.xyz, 2)+fLightAmount)*1;

  // Output final color and blending amount
  OUT.Color = half4(refrColor + fMaskVariation*saturate(fNanoMask>0) * cCloakHex * saturate(1-NdotESat),
                   saturate(fNanoMask) * vRefrCloakAmount.y );

  return OUT;  
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

vtxOUTSparks CloakSparksVS(app2vertMotionBlur IN)
{
  vtxOUTSparks OUT = (vtxOUTSparks)0; 

  // Position in screen space.
  streamPos vertPassPos = (streamPos)0;

  streamPos_FromMotionBlur(IN, vertPassPos);

  //vertPassPos.ObjToTangentSpace[0] = IN.Tangent.xyz;
 // vertPassPos.ObjToTangentSpace[1] = IN.Binormal.xyz;
//  vertPassPos.ObjToTangentSpace[2] = normalize(cross(IN.Tangent, IN.Binormal)) * IN.Tangent.w;
  
  // Displace vertex position for more interesting sparks animation
//  IN.Position.xyz += vertPassPos.ObjToTangentSpace[2] * (0.0025 + 0.01*sin(g_VS_AnimGenParams.x*4+20*length(IN.Position.xyz)));//*OUT.baseTC.z;

  
  streamPos vertPassPosPrev = vertPassPos;

  _TCModify(IN.baseTC, OUT.baseTC, vertPassPos.Position, vertPassPos.ObjToTangentSpace[2], TS_DIFFUSE);
  
  float4 vCloakParams = 0;
  #if %_RT_INSTANCING_ATTR
    vCloakParams = IN.InstCloakParams;    
  #else
    vCloakParams = CloakParams;
  #endif
  OUT.baseTC.zw = vCloakParams.wz;

  OUT.vPosOS.xyz = vertPassPos.Position.xyz * SparksTilling;
  
  OUT.HPosition = Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPos);

  //////////////////////////////////////////////////////////////////////////////////////////////////
  // Compute and output speed scale

  float fSpeedScale = 0; //saturate(vCloakParams.x);
  OUT.vConstants.z = fSpeedScale;

  //////////////////////////////////////////////////////////////////////////////////////////////////
  // Output distance to world origin
  float3 vWorldPos = vertPassPos.WorldPos.xyz+g_VS_WorldViewPos.xyz;
  OUT.vPosOS.w = length(  vWorldPos.xyz   );

  // Output the screen-space texture coordinates
  OUT.screenPos = HPosToScreenTC(OUT.HPosition);

  //////////////////////////////////////////////////////////////////////////////////////////////////
  // Output commonly used constants
  OUT.screenPos.z = OUT.screenPos.w* g_VS_NearFarClipDist.w;
#if %_RT_NEAREST
  OUT.screenPos.z *= g_VS_NearFarClipDist.z;
#endif

  float fCloakAmount = OUT.baseTC.z;
  float fCloakAmountBump = max(1 - fCloakAmount, 0.0);
  OUT.vConstants.xy = half2(frac(AnimGenParams)*2,  1 ) * 0.1 * half2( 1-fCloakAmount+max(0,-1+fSpeedScale*0.1), max((0-fCloakAmount)*0.2, 0.1));

  return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

pixout CloakSparksPS(vtxOUTSparks IN)
{
  pixout OUT;  

  int nQuality = GetShaderQuality(); 

  half fSpeedScale = IN.vConstants.z;
  half fCloakAmount = IN.baseTC.z;
  half fLightAmount = IN.baseTC.w;

  half2 refrTC = (IN.screenPos.xy/IN.screenPos.ww) ;
  half3 normalVec = GetNormalMap(bumpMapSampler, IN.baseTC.xy);

  // cloakInterlationMapSampler.w = abs(frac((refrTC.y+RandomVals.x)*PS_ScreenSize.y*0.25)*2-1);
  half fInterlation  = tex2D(cloakInterlationMapSampler, (refrTC.y+RandomVals.x)*PS_ScreenSize.y*0.25 ).w;

  half2 vCloakTransition = IN.vConstants.xy;
  half3 vSparksVariation = vCloakTransition.x + normalVec.xyz * vCloakTransition.y; // 1 inst

  half fSparks = tex3D(volumeNoiseSampler, IN.vPosOS.xyz + vSparksVariation).w; // 1 inst
  //fSparks = tex3D(volumeNoiseSampler, IN.vPosOS.xyz + fSparks*0.2 + vSparksVariation).w;;  // 2 inst

 // if( nQuality > QUALITY_LOW )
//  {
//#ifndef PS20Only 
    // shader model 2.0 has restritions regarding to texture fetch dependency chain complexity
//    fSparks = tex3D(volumeNoiseSampler, IN.vPosOS.xyz + fSparks*0.4 + vSparksVariation).w; // 2 inst
//#endif
//  }

  half fCloakTransition = tex2D(cloakTransitionMapSampler, fCloakAmount).w;
  fCloakTransition *= fCloakTransition ;
  fCloakTransition *= fCloakTransition ;

//  half3 fSparksFinal =  8 * SparksColor *((pow( abs( frac(fSparks + AnimGenParams + 0.1)*2-1), 64*4)+
//                                           pow( abs( frac(fSparks*1.53 + AnimGenParams*2 + 0.4+  IN.vPosOS.w*0.1)*2-1), 64*2) )+
//                                           pow( abs( frac(fSparks*1.7 + AnimGenParams*1.4 + 0.2)*2-1), 64*2) );
//fSparksFinal *= fSparksFinal;

  half3 fSparksFinal =   half3(tex2D(cloakSparksMapSampler,  fSparks + AnimGenParams + 0.2).x, // 1 inst
                               tex2D(cloakSparksMapSampler,  fSparks*1.53 + AnimGenParams*0.5 + 0.4+  IN.vPosOS.w*0.1).y, // 4 inst
                               tex2D(cloakSparksMapSampler,  fSparks*1.7 + AnimGenParams*0.2 + 0.2).z ); // 2 inst

  fSparksFinal = half4(0.1,0.3,1.0,1)*dot(fSparksFinal.xyz,4);
  fSparksFinal *= fSparksFinal; // 1 inst

  half4 finalColor = 0;
  finalColor.xyz = fInterlation * fSparksFinal * max(fSpeedScale, fCloakTransition); // 3 inst

  float fDepth = tex2Dproj(depthMapSampler, IN.screenPos);  
  finalColor.xyz *=  saturate( (fDepth  - IN.screenPos.z )*5000); // soft-ztest // 3 inst

  OUT.Color = finalColor *fLightAmount;

  return OUT;  
}

// Technique

technique General
{
  pass p0
  {
    VertexShader = compile vs_Auto CloakVS() GeneralVS;
    PixelShader = compile ps_Auto CloakRefrationPS() GeneralPS;
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = Back;
    ZFunc = LEqual;

    SrcBlend = SRC_ALPHA;
    DestBlend = ONE_MINUS_SRC_ALPHA;
    AlphaBlendEnable = true;     
  }

  pass p1
  {
    VertexShader = compile vs_Auto CloakSparksVS() GeneralVS;
    PixelShader = compile ps_Auto CloakSparksPS() GeneralPS;
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = Back;
    ZFunc = LEqual;

    SrcBlend = ONE;
    DestBlend = ONE;
    AlphaBlendEnable = true;
  }
}
